// Copyright 2024 Innkeeper BugsMo(莫维龙) &lt;18550039021@163.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/bugsmo/miniweb.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: miniweb/v1/miniweb.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MiniWeb_ListUser_FullMethodName = "/v1.MiniWeb/ListUser"
)

// MiniWebClient is the client API for MiniWeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MiniWeb 定义了一个 MiniWeb RPC 服务.
type MiniWebClient interface {
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
}

type miniWebClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniWebClient(cc grpc.ClientConnInterface) MiniWebClient {
	return &miniWebClient{cc}
}

func (c *miniWebClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, MiniWeb_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniWebServer is the server API for MiniWeb service.
// All implementations must embed UnimplementedMiniWebServer
// for forward compatibility.
//
// MiniWeb 定义了一个 MiniWeb RPC 服务.
type MiniWebServer interface {
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	mustEmbedUnimplementedMiniWebServer()
}

// UnimplementedMiniWebServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMiniWebServer struct{}

func (UnimplementedMiniWebServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedMiniWebServer) mustEmbedUnimplementedMiniWebServer() {}
func (UnimplementedMiniWebServer) testEmbeddedByValue()                 {}

// UnsafeMiniWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniWebServer will
// result in compilation errors.
type UnsafeMiniWebServer interface {
	mustEmbedUnimplementedMiniWebServer()
}

func RegisterMiniWebServer(s grpc.ServiceRegistrar, srv MiniWebServer) {
	// If the following call pancis, it indicates UnimplementedMiniWebServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MiniWeb_ServiceDesc, srv)
}

func _MiniWeb_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniWebServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniWeb_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniWebServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiniWeb_ServiceDesc is the grpc.ServiceDesc for MiniWeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniWeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MiniWeb",
	HandlerType: (*MiniWebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _MiniWeb_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miniweb/v1/miniweb.proto",
}
